The task is to find a 2D subarray whose sum is the largest. This sum cannot be negative - if all the elements in the array are less 
than zero then the maximum subarray is empty and the sum is 0. The program should run in O(max(n, m)^3) time (n and m are the 
number of rows and columns). The output should be the maximum sum and the indices i, j, k, l of the subarray, where 'i' and 'j' are 
row numbers, and 'k' and 'l' are column numbers where the subarray starts and ends, respectively. If there are multiple subarrays 
with the maximum sum, return the one with the least number of elements. If there are multiple such subarrays, return the one whose 
indices i, j, k, l form the lexicographically smallest sequence.

Input:
The input data for the program is read from the standard input according to the following specification. The first value provided is a positive integer indicating the number of data sets, after which the input will contain the specified number of data sets. Each data set contains the following information: the dataset number on the first line, followed by a string " : " and two positive integers between 1 and 100 indicating the number of rows and columns in the array, respectively. The next lines contain the data for each row of the array, in accordance with the specified number of rows and columns.

Output:
For each data set number, if the maximum subarray is not empty, the program will print a line in the form: 
{nz}: n = {n} m = {m}, ms = {max_sum}, mst = a[{i}..{j}][{k}..{l}] 
Data in curly braces {} should be replaced with appropriate data. "nz" is data set number, n and m are numbers of rows and columns, "max_sum" is the sum of elements in maximum 2D subarray and "i", "j", "k", "l" are subarray indices.
